// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reminders.sql

package sqlite

import (
	"context"
	"time"
)

const addReminder = `-- name: AddReminder :exec
INSERT INTO
    reminder (message_id, user_id, channel_id, remind_at)
VALUES
    (?, ?, ?, ?)
`

type AddReminderParams struct {
	MessageID string
	UserID    string
	ChannelID string
	RemindAt  time.Time
}

func (q *Queries) AddReminder(ctx context.Context, arg AddReminderParams) error {
	_, err := q.db.ExecContext(ctx, addReminder,
		arg.MessageID,
		arg.UserID,
		arg.ChannelID,
		arg.RemindAt,
	)
	return err
}

const deleteReminder = `-- name: DeleteReminder :exec
DELETE FROM
    reminder
WHERE
    id = ?
`

func (q *Queries) DeleteReminder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReminder, id)
	return err
}

const getReminders = `-- name: GetReminders :many
SELECT
    id, message_id, user_id, channel_id, remind_at
FROM
    reminder
`

func (q *Queries) GetReminders(ctx context.Context) ([]Reminder, error) {
	rows, err := q.db.QueryContext(ctx, getReminders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reminder
	for rows.Next() {
		var i Reminder
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.UserID,
			&i.ChannelID,
			&i.RemindAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
