// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: muses.sql

package sqlite

import (
	"context"
)

const createMuse = `-- name: CreateMuse :exec
INSERT
    OR IGNORE INTO muse (hash, rating)
VALUES
    (?, ?)
`

type CreateMuseParams struct {
	Hash   string
	Rating int64
}

func (q *Queries) CreateMuse(ctx context.Context, arg CreateMuseParams) error {
	_, err := q.db.ExecContext(ctx, createMuse, arg.Hash, arg.Rating)
	return err
}

const getMuseRating = `-- name: GetMuseRating :one
SELECT
    rating
FROM
    muse
WHERE
    hash = ?
LIMIT
    1
`

func (q *Queries) GetMuseRating(ctx context.Context, hash string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMuseRating, hash)
	var rating int64
	err := row.Scan(&rating)
	return rating, err
}
